class Solution {
public:
    int firstOcc(vector<int> &arr,int x){
        int n = arr.size();
        int low = 0 , high = n - 1 , mid;
        int first = -1;

        while(low <= high){
            mid = (low + high) / 2;

            if(arr[mid]==x) {first = mid , high = mid - 1;}

            else if(arr[mid] < x ) low = mid + 1;
            else high = mid - 1; 
        }
        return first;
    }

    int lastOcc(vector<int> &arr,int x){
        int n = arr.size();
        int low = 0 , high = n - 1 , mid;
        int last = -1;

        while(low <= high){
            mid = (low + high) / 2;

            if(arr[mid]==x){ last = mid ,low = mid + 1;}

            else if(arr[mid] < x ) low = mid + 1;
            else high = mid - 1; 
        }
        return last;
    }
    vector<int> searchRange(vector<int>& nums, int target) {

        int first = firstOcc(nums,target);
        if(first == -1) return {-1,-1};

        int last = lastOcc(nums,target);

        return{first,last};
    }
};